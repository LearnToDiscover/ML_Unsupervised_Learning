setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/ML_unsupervised")
source("setup.R")library(reticulate)
library(reticulate)
Sys.unsetenv("RETICULATE_PYTHON")
use_python("/Users/Adam/.virtualenvs/r-reticulate/bin/python3", required = TRUE)
py_config()
source("setup.R")
source("setup.R")
sandpaper::serve()
sandpaper::serve()
sandpaper::serve()
sandpaper::serve()
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/ML_unsupervised")
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/ML_unsupervised")
sandpaper::reset_site()
source("setup.R")
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/ML_unsupervised")
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/ML_unsupervised")
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/ML_unsupervised")
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
sandpaper::reset_site()
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/ML_unsupervised")
sandpaper::reset_site()
source(“setup.R”)
source("setup.R")
sandpaper::serve()
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/ML_unsupervised")
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/Networks_2")
sandpaper::reset_site()
sandpaper::serve()
sandpaper::reset_site()
sandpaper::serve()
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
reticulate::py_config()
Sys.unsetenv("RETICULATE_PYTHON")
reticulate::py_config()
Sys.setenv(RETICULATE_PYTHON = "/Users/Adam/.virtualenvs/r-reticulate/python3")
reticulate::py_config()
Sys.setenv(RETICULATE_PYTHON = "/Users/Adam/.virtualenvs/r-reticulate")
reticulate::py_config()
sandpaper::serve()
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/Networks_2")
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
reticulate::repl_python()
library(reticulate)
# Clear previous Python environment to avoid conflicts
Sys.unsetenv("RETICULATE_PYTHON")
reticulate::py_discover_config()  # Print current Python configuration (if any)
# Dynamically set the Python environment
tryCatch({
use_virtualenv("/Users/Adam/.virtualenvs/r-reticulate", required = TRUE)
cat("Python virtual environment set successfully.\n")
}, error = function(e) {
stop("Error setting Python environment: ", e$message)
})
# Validate Python environment and dependencies
tryCatch({
py_config()
if (!py_module_available("numpy")) {
stop("The 'numpy' module is not available in the current environment.")
}
cat("Python environment and 'numpy' are correctly configured.\n")
}, error = function(e) {
stop("Failed to validate Python environment: ", e$message)
})
# Configure knitr chunk options
knitr::opts_chunk$set(
eval = TRUE,         # Execute the code chunks
echo = TRUE,         # Display the code chunks in the final output
message = FALSE,     # Suppress messages
warning = FALSE,     # Suppress warnings
results = 'hold',    # Group outputs together for consistent formatting
engine = "python"    # Use Python engine for code chunks
)
cat("Setup chunk complete.\n")
reticulate::repl_python()
